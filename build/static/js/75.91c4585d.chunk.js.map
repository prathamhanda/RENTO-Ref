{"version":3,"file":"static/js/75.91c4585d.chunk.js","mappings":"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","sources":["pages/owner/CreateListing.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useListing } from '../../context/ListingContext';\nimport { useLocationContext } from '../../context/LocationContext';\nimport Spinner from '../../components/common/Spinner';\nimport LocationSelector from '../../components/listings/LocationSelector';\nimport DashboardLayout from '../../layouts/DashboardLayout';\nimport axios from 'axios';\n\nconst amenitiesList = [\n  'Wi-Fi', 'TV', 'Air Conditioning', 'Washing Machine', 'Refrigerator', \n  'Microwave', 'Gas Connection', 'Parking', 'Power Backup', 'Security', \n  'CCTV', 'Gym', 'Swimming Pool', 'Study Room', 'Housekeeping'\n];\n\nconst rulesList = [\n  'No Smoking', 'No Pets', 'No Parties', 'No Visitors after 10pm',\n  'ID Proof Required', 'No Alcohol', 'Vegetarian Only', 'No Non-Veg Cooking'\n];\n\nconst CreateListing = () => {\n  const { id } = useParams();\n  const navigate = useNavigate();\n  const { createListing, updateListing, getListingById, loading, error } = useListing();\n  const { getAllLocations, getCurrentLocation, showError } = useLocationContext();\n  \n  const [formData, setFormData] = useState({\n    title: '',\n    description: '',\n    type: 'single',\n    price: '',\n    securityDeposit: '',\n    address: '',\n    location: '',\n    availableFrom: '',\n    occupancy: 'single',\n    maxOccupancy: 1,\n    amenities: [],\n    rules: [],\n    images: [],\n    isActive: true\n  });\n  \n  const [locations, setLocations] = useState([]);\n  const [isEditMode, setIsEditMode] = useState(false);\n  const [formErrors, setFormErrors] = useState({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isLoading, setIsLoading] = useState(id ? true : false);\n  const [loadError, setLoadError] = useState(null);\n  const [imageFiles, setImageFiles] = useState([]);\n  const [imagePreviewUrls, setImagePreviewUrls] = useState([]);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [locationData, setLocationData] = useState(null);\n  \n  // Format date as YYYY-MM-DD for input field\n  const formatDateForInput = (date) => {\n    return new Date(date).toISOString().split('T')[0];\n  };\n  \n  // Load locations and listing data if in edit mode\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        // Fetch locations\n        const locationsData = await getAllLocations();\n        setLocations(locationsData);\n        \n        // If we have an ID, we're in edit mode\n        if (id) {\n          setIsEditMode(true);\n          const listingData = await getListingById(id);\n          \n          // Format dates and convert data types\n          const formattedListing = {\n            ...listingData,\n            price: String(listingData.price),\n            securityDeposit: String(listingData.securityDeposit),\n            availableFrom: formatDateForInput(listingData.availableFrom),\n            maxOccupancy: listingData.maxOccupancy || 1,\n            location: listingData.location._id\n          };\n          \n          setFormData(formattedListing);\n          setImagePreviewUrls(listingData.images || []);\n          setIsLoading(false);\n        }\n      } catch (err) {\n        console.error('Error loading initial data:', err);\n        setLoadError('Failed to load form data. Please try again.');\n        setIsLoading(false);\n      }\n    };\n    \n    fetchInitialData();\n  }, [id, getAllLocations, getListingById]);\n  \n  const handleChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    \n    // Clear any error for this field\n    if (formErrors[name]) {\n      setFormErrors({\n        ...formErrors,\n        [name]: ''\n      });\n    }\n    \n    if (name === 'amenities' || name === 'rules') {\n      // Handle checkboxes for amenities and rules\n      const currentArray = [...formData[name]];\n      if (checked) {\n        currentArray.push(value);\n      } else {\n        const index = currentArray.indexOf(value);\n        if (index > -1) {\n          currentArray.splice(index, 1);\n        }\n      }\n      setFormData({\n        ...formData,\n        [name]: currentArray\n      });\n    } else if (type === 'checkbox') {\n      // For isActive checkbox\n      setFormData({\n        ...formData,\n        [name]: checked\n      });\n    } else if (name === 'price' || name === 'securityDeposit' || name === 'maxOccupancy') {\n      // Only allow numbers for price, security deposit and max occupancy\n      const regex = /^[0-9]*$/;\n      if (value === '' || regex.test(value)) {\n        setFormData({\n          ...formData,\n          [name]: value\n        });\n      }\n    } else {\n      setFormData({\n        ...formData,\n        [name]: value\n      });\n    }\n  };\n  \n  const handleImageChange = (e) => {\n    e.preventDefault();\n    \n    const files = Array.from(e.target.files);\n    \n    // Add new files to existing ones\n    setImageFiles(prevFiles => [...prevFiles, ...files]);\n    \n    // Create previews for new files\n    const newPreviews = files.map(file => URL.createObjectURL(file));\n    setImagePreviewUrls(prevUrls => [...prevUrls, ...newPreviews]);\n  };\n  \n  const removeImage = (index) => {\n    // Remove from preview array\n    setImagePreviewUrls(prevUrls => prevUrls.filter((_, i) => i !== index));\n    \n    // If it's a new image (file object exists), remove from files array\n    if (imageFiles[index]) {\n      setImageFiles(prevFiles => prevFiles.filter((_, i) => i !== index));\n    } else if (isEditMode) {\n      // If it's an existing image URL in edit mode, remove from form data\n      const updatedImages = [...formData.images];\n      updatedImages.splice(index, 1);\n      setFormData({\n        ...formData,\n        images: updatedImages\n      });\n    }\n  };\n  \n  const validateForm = () => {\n    const errors = {};\n    \n    // Required fields\n    if (!formData.title.trim()) errors.title = 'Title is required';\n    if (!formData.description.trim()) errors.description = 'Description is required';\n    if (!formData.price) errors.price = 'Price is required';\n    if (!formData.securityDeposit) errors.securityDeposit = 'Security deposit is required';\n    if (!formData.address.trim()) errors.address = 'Address is required';\n    if (!formData.location) errors.location = 'Location is required';\n    if (!formData.availableFrom) errors.availableFrom = 'Available date is required';\n    \n    // Length validations\n    if (formData.title.length > 100) errors.title = 'Title cannot exceed 100 characters';\n    if (formData.description.length > 2000) errors.description = 'Description cannot exceed 2000 characters';\n    \n    // Numeric validations\n    if (parseInt(formData.price) <= 0) errors.price = 'Price must be greater than 0';\n    if (parseInt(formData.securityDeposit) < 0) errors.securityDeposit = 'Security deposit cannot be negative';\n    if (parseInt(formData.maxOccupancy) <= 0) errors.maxOccupancy = 'Maximum occupancy must be at least 1';\n    \n    // Image validation\n    if (!isEditMode && imageFiles.length === 0) {\n      errors.images = 'At least one image is required';\n    }\n    \n    setFormErrors(errors);\n    return Object.keys(errors).length === 0;\n  };\n  \n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    // Ensure we have location data\n    if (!locationData) {\n      showError('Please select a location for your listing');\n      return;\n    }\n    \n    if (!validateForm()) {\n      // Scroll to the first error\n      const firstError = document.querySelector('.text-red-600');\n      if (firstError) {\n        firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });\n      }\n      return;\n    }\n    \n    setIsSubmitting(true);\n    \n    // Prepare form data\n    const processedData = {\n      ...formData,\n      price: parseInt(formData.price),\n      securityDeposit: parseInt(formData.securityDeposit),\n      maxOccupancy: parseInt(formData.maxOccupancy),\n      location: locationData._id,\n      address: locationData.address,\n      coordinates: locationData.coordinates,\n      availableFrom: new Date(formData.availableFrom).toISOString()\n    };\n    \n    try {\n      if (isEditMode) {\n        // Update existing listing\n        await updateListing(id, processedData, imageFiles, (progress) => {\n          setUploadProgress(progress);\n        });\n        navigate('/dashboard/listings');\n      } else {\n        // Create new listing\n        await createListing(processedData, imageFiles, (progress) => {\n          setUploadProgress(progress);\n        });\n        navigate('/dashboard/listings');\n      }\n    } catch (err) {\n      console.error('Error saving listing:', err);\n      window.scrollTo(0, 0);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n  \n  if (isLoading) {\n    return (\n      <div className=\"flex justify-center items-center h-full p-8\">\n        <Spinner size=\"large\" color=\"indigo\" />\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"min-h-screen bg-gray-50 py-8 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"bg-white shadow-sm rounded-lg p-8 border border-gray-200\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-3xl font-bold text-gray-900\">\n              {isEditMode ? 'Edit Listing' : 'Create New Listing'}\n            </h1>\n            <p className=\"mt-2 text-gray-600\">\n              Fill in the details below to {isEditMode ? 'update your' : 'create a new'} listing.\n            </p>\n          </div>\n\n          {loadError && (\n            <div className=\"mb-6 bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg\">\n              {loadError}\n            </div>\n          )}\n\n          <form onSubmit={handleSubmit} className=\"space-y-8\">\n            {/* Basic Information */}\n            <div className=\"space-y-6\">\n              <h2 className=\"text-xl font-semibold text-gray-900\">Basic Information</h2>\n              \n              <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2\">\n                <div>\n                  <label htmlFor=\"title\" className=\"block text-sm font-medium text-gray-900\">\n                    Title*\n                  </label>\n                  <input\n                    type=\"text\"\n                    id=\"title\"\n                    name=\"title\"\n                    value={formData.title}\n                    onChange={handleChange}\n                    className=\"mt-1 block w-full border border-gray-300 rounded-lg shadow-sm py-2.5 px-3 bg-white text-gray-900 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n                    placeholder=\"Enter listing title\"\n                  />\n                  {formErrors.title && (\n                    <p className=\"mt-1 text-sm text-red-600\">{formErrors.title}</p>\n                  )}\n                </div>\n\n                <div>\n                  <label htmlFor=\"type\" className=\"block text-sm font-medium text-gray-900\">\n                    Type*\n                  </label>\n                  <select\n                    id=\"type\"\n                    name=\"type\"\n                    value={formData.type}\n                    onChange={handleChange}\n                    className=\"mt-1 block w-full border border-gray-300 rounded-lg shadow-sm py-2.5 px-3 bg-white text-gray-900 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n                  >\n                    <option value=\"single\">Single Room</option>\n                    <option value=\"double\">Double Sharing</option>\n                    <option value=\"triple\">Triple Sharing</option>\n                    <option value=\"four\">Four Sharing</option>\n                  </select>\n                </div>\n              </div>\n\n              <div>\n                <label htmlFor=\"description\" className=\"block text-sm font-medium text-gray-900\">\n                  Description*\n                </label>\n                <textarea\n                  id=\"description\"\n                  name=\"description\"\n                  rows={4}\n                  value={formData.description}\n                  onChange={handleChange}\n                  className=\"mt-1 block w-full border border-gray-300 rounded-lg shadow-sm py-2.5 px-3 bg-white text-gray-900 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n                  placeholder=\"Describe your listing\"\n                />\n                {formErrors.description && (\n                  <p className=\"mt-1 text-sm text-red-600\">{formErrors.description}</p>\n                )}\n              </div>\n            </div>\n\n            {/* Location Information */}\n            <div className=\"space-y-6\">\n              <h2 className=\"text-xl font-semibold text-gray-900\">Location</h2>\n              \n              <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2\">\n                <div>\n                  <label htmlFor=\"location\" className=\"block text-sm font-medium text-gray-900\">\n                    Area*\n                  </label>\n                  <select\n                    id=\"location\"\n                    name=\"location\"\n                    value={formData.location}\n                    onChange={handleChange}\n                    className=\"mt-1 block w-full border border-gray-300 rounded-lg shadow-sm py-2.5 px-3 bg-white text-gray-900 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n                  >\n                    <option value=\"\">Select an area</option>\n                    {locations.map((location) => (\n                      <option key={location._id} value={location._id}>\n                        {location.name}\n                      </option>\n                    ))}\n                  </select>\n                  {formErrors.location && (\n                    <p className=\"mt-1 text-sm text-red-600\">{formErrors.location}</p>\n                  )}\n                </div>\n\n                <div>\n                  <label htmlFor=\"address\" className=\"block text-sm font-medium text-gray-900\">\n                    Address*\n                  </label>\n                  <input\n                    type=\"text\"\n                    id=\"address\"\n                    name=\"address\"\n                    value={formData.address}\n                    onChange={handleChange}\n                    className=\"mt-1 block w-full border border-gray-300 rounded-lg shadow-sm py-2.5 px-3 bg-white text-gray-900 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n                    placeholder=\"Enter complete address\"\n                  />\n                  {formErrors.address && (\n                    <p className=\"mt-1 text-sm text-red-600\">{formErrors.address}</p>\n                  )}\n                </div>\n              </div>\n            </div>\n\n            {/* Pricing and Availability */}\n            <div className=\"space-y-6\">\n              <h2 className=\"text-xl font-semibold text-gray-900\">Pricing & Availability</h2>\n              \n              <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-3\">\n                <div>\n                  <label htmlFor=\"price\" className=\"block text-sm font-medium text-gray-900\">\n                    Monthly Rent (₹)*\n                  </label>\n                  <input\n                    type=\"number\"\n                    id=\"price\"\n                    name=\"price\"\n                    value={formData.price}\n                    onChange={handleChange}\n                    className=\"mt-1 block w-full border border-gray-300 rounded-lg shadow-sm py-2.5 px-3 bg-white text-gray-900 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n                    placeholder=\"Enter monthly rent\"\n                  />\n                  {formErrors.price && (\n                    <p className=\"mt-1 text-sm text-red-600\">{formErrors.price}</p>\n                  )}\n                </div>\n\n                <div>\n                  <label htmlFor=\"securityDeposit\" className=\"block text-sm font-medium text-gray-900\">\n                    Security Deposit (₹)*\n                  </label>\n                  <input\n                    type=\"number\"\n                    id=\"securityDeposit\"\n                    name=\"securityDeposit\"\n                    value={formData.securityDeposit}\n                    onChange={handleChange}\n                    className=\"mt-1 block w-full border border-gray-300 rounded-lg shadow-sm py-2.5 px-3 bg-white text-gray-900 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n                    placeholder=\"Enter security deposit\"\n                  />\n                  {formErrors.securityDeposit && (\n                    <p className=\"mt-1 text-sm text-red-600\">{formErrors.securityDeposit}</p>\n                  )}\n                </div>\n\n                <div>\n                  <label htmlFor=\"availableFrom\" className=\"block text-sm font-medium text-gray-900\">\n                    Available From*\n                  </label>\n                  <input\n                    type=\"date\"\n                    id=\"availableFrom\"\n                    name=\"availableFrom\"\n                    value={formData.availableFrom}\n                    onChange={handleChange}\n                    min={new Date().toISOString().split('T')[0]}\n                    className=\"mt-1 block w-full border border-gray-300 rounded-lg shadow-sm py-2.5 px-3 bg-white text-gray-900 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n                  />\n                  {formErrors.availableFrom && (\n                    <p className=\"mt-1 text-sm text-red-600\">{formErrors.availableFrom}</p>\n                  )}\n                </div>\n              </div>\n            </div>\n\n            {/* Amenities */}\n            <div className=\"space-y-6\">\n              <h2 className=\"text-xl font-semibold text-gray-900\">Amenities</h2>\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4\">\n                {amenitiesList.map((amenity) => (\n                  <div key={amenity} className=\"flex items-center\">\n                    <input\n                      type=\"checkbox\"\n                      id={`amenity-${amenity}`}\n                      name=\"amenities\"\n                      value={amenity}\n                      checked={formData.amenities.includes(amenity)}\n                      onChange={handleChange}\n                      className=\"h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded\"\n                    />\n                    <label htmlFor={`amenity-${amenity}`} className=\"ml-3 text-sm text-gray-900\">\n                      {amenity}\n                    </label>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* House Rules */}\n            <div className=\"space-y-6\">\n              <h2 className=\"text-xl font-semibold text-gray-900\">House Rules</h2>\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4\">\n                {rulesList.map((rule) => (\n                  <div key={rule} className=\"flex items-center\">\n                    <input\n                      type=\"checkbox\"\n                      id={`rule-${rule}`}\n                      name=\"rules\"\n                      value={rule}\n                      checked={formData.rules.includes(rule)}\n                      onChange={handleChange}\n                      className=\"h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded\"\n                    />\n                    <label htmlFor={`rule-${rule}`} className=\"ml-3 text-sm text-gray-900\">\n                      {rule}\n                    </label>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Images */}\n            <div className=\"space-y-6\">\n              <h2 className=\"text-xl font-semibold text-gray-900\">Images</h2>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center space-x-6\">\n                  <label\n                    htmlFor=\"images\"\n                    className=\"flex items-center justify-center px-6 py-4 border-2 border-gray-300 border-dashed rounded-lg cursor-pointer hover:border-indigo-500 transition-colors\"\n                  >\n                    <div className=\"space-y-1 text-center\">\n                      <svg\n                        className=\"mx-auto h-12 w-12 text-gray-400\"\n                        stroke=\"currentColor\"\n                        fill=\"none\"\n                        viewBox=\"0 0 48 48\"\n                        aria-hidden=\"true\"\n                      >\n                        <path\n                          d=\"M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02\"\n                          strokeWidth={2}\n                          strokeLinecap=\"round\"\n                          strokeLinejoin=\"round\"\n                        />\n                      </svg>\n                      <div className=\"text-sm text-gray-600\">\n                        <span className=\"font-medium text-indigo-600 hover:text-indigo-500\">\n                          Upload images\n                        </span>\n                        {' or drag and drop'}\n                      </div>\n                      <p className=\"text-xs text-gray-500\">PNG, JPG, GIF up to 10MB</p>\n                    </div>\n                    <input\n                      id=\"images\"\n                      name=\"images\"\n                      type=\"file\"\n                      multiple\n                      accept=\"image/*\"\n                      onChange={handleImageChange}\n                      className=\"sr-only\"\n                    />\n                  </label>\n                  {uploadProgress > 0 && (\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-40 bg-gray-200 rounded-full h-2.5\">\n                        <div\n                          className=\"bg-indigo-600 h-2.5 rounded-full\"\n                          style={{ width: `${uploadProgress}%` }}\n                        ></div>\n                      </div>\n                      <span className=\"text-sm text-gray-600\">{uploadProgress}%</span>\n                    </div>\n                  )}\n                </div>\n\n                {formErrors.images && (\n                  <p className=\"text-sm text-red-600\">{formErrors.images}</p>\n                )}\n\n                {/* Image Preview */}\n                {imagePreviewUrls.length > 0 && (\n                  <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4 mt-4\">\n                    {imagePreviewUrls.map((url, index) => (\n                      <div key={index} className=\"relative group\">\n                        <div className=\"aspect-w-16 aspect-h-9\">\n                          <img\n                            src={url}\n                            alt={`Preview ${index + 1}`}\n                            className=\"object-cover rounded-lg\"\n                          />\n                        </div>\n                        <button\n                          type=\"button\"\n                          onClick={() => removeImage(index)}\n                          className=\"absolute top-2 right-2 p-1.5 bg-red-100 rounded-full text-red-600 opacity-0 group-hover:opacity-100 transition-opacity\"\n                        >\n                          <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\" />\n                          </svg>\n                        </button>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Submit Button */}\n            <div className=\"pt-6\">\n              <button\n                type=\"submit\"\n                disabled={isSubmitting}\n                className=\"w-full flex justify-center py-3 px-4 border border-transparent rounded-lg shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50 disabled:cursor-not-allowed transition\"\n              >\n                {isSubmitting ? (\n                  <div className=\"flex items-center\">\n                    <svg className=\"animate-spin -ml-1 mr-3 h-5 w-5 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                      <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                      <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                    </svg>\n                    {isEditMode ? 'Updating...' : 'Creating...'}\n                  </div>\n                ) : (\n                  isEditMode ? 'Update Listing' : 'Create Listing'\n                )}\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CreateListing; "],"names":["amenitiesList","rulesList","CreateListing","id","useParams","navigate","useNavigate","createListing","updateListing","getListingById","loading","error","useListing","getAllLocations","getCurrentLocation","showError","useLocationContext","formData","setFormData","useState","title","description","type","price","securityDeposit","address","location","availableFrom","occupancy","maxOccupancy","amenities","rules","images","isActive","locations","setLocations","isEditMode","setIsEditMode","formErrors","setFormErrors","isSubmitting","setIsSubmitting","isLoading","setIsLoading","loadError","setLoadError","imageFiles","setImageFiles","imagePreviewUrls","setImagePreviewUrls","uploadProgress","setUploadProgress","locationData","setLocationData","useEffect","async","locationsData","listingData","formattedListing","String","date","Date","toISOString","split","_id","err","console","fetchInitialData","handleChange","e","name","value","checked","target","currentArray","push","index","indexOf","splice","test","_jsx","className","children","Spinner","size","color","_jsxs","onSubmit","preventDefault","validateForm","errors","trim","length","parseInt","Object","keys","firstError","document","querySelector","scrollIntoView","behavior","block","processedData","coordinates","progress","window","scrollTo","htmlFor","onChange","placeholder","rows","map","min","amenity","includes","rule","stroke","fill","viewBox","d","strokeWidth","strokeLinecap","strokeLinejoin","multiple","accept","files","Array","from","prevFiles","newPreviews","file","URL","createObjectURL","prevUrls","style","width","url","src","alt","onClick","filter","_","i","updatedImages","removeImage","disabled","xmlns","cx","cy","r"],"sourceRoot":""}