{"version":3,"file":"static/js/392.ef50561e.chunk.js","mappings":"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","sources":["pages/auth/ResetPassword.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { Link, useNavigate, useParams, useLocation } from 'react-router-dom';\nimport { useAuth } from '../../context/AuthContext';\nimport Spinner from '../../components/common/Spinner';\n\nconst ResetPassword = () => {\n  const [formData, setFormData] = useState({\n    password: '',\n    confirmPassword: ''\n  });\n  const [errors, setErrors] = useState({});\n  const [showPassword, setShowPassword] = useState(false);\n  const [success, setSuccess] = useState(false);\n  const { resetPassword, loading, error } = useAuth();\n  const { token } = useParams();\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  // Extract token from URL if not in params\n  useEffect(() => {\n    if (!token) {\n      const searchParams = new URLSearchParams(location.search);\n      const tokenFromQuery = searchParams.get('token');\n      \n      if (!tokenFromQuery) {\n        navigate('/forgot-password');\n      }\n    }\n  }, [token, location.search, navigate]);\n\n  const validateForm = () => {\n    const newErrors = {};\n    \n    // Password validation\n    if (!formData.password) {\n      newErrors.password = 'Password is required';\n    } else if (formData.password.length < 6) {\n      newErrors.password = 'Password must be at least 6 characters';\n    }\n    \n    // Confirm password validation\n    if (!formData.confirmPassword) {\n      newErrors.confirmPassword = 'Please confirm your password';\n    } else if (formData.password !== formData.confirmPassword) {\n      newErrors.confirmPassword = 'Passwords do not match';\n    }\n    \n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value\n    });\n    \n    // Clear error for the field being edited\n    if (errors[name]) {\n      setErrors({\n        ...errors,\n        [name]: null\n      });\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    if (validateForm()) {\n      try {\n        // Get token from params or query string\n        const resetToken = token || new URLSearchParams(location.search).get('token');\n        \n        const result = await resetPassword(resetToken, formData.password);\n        if (result.success) {\n          setSuccess(true);\n          // Redirect to login after 3 seconds\n          setTimeout(() => {\n            navigate('/login');\n          }, 3000);\n        }\n      } catch (err) {\n        console.error('Password reset error:', err);\n      }\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8\">\n      <div className=\"sm:mx-auto sm:w-full sm:max-w-md\">\n        <h2 className=\"mt-6 text-center text-3xl font-extrabold text-gray-900\">\n          Set new password\n        </h2>\n        <p className=\"mt-2 text-center text-sm text-gray-600\">\n          <Link to=\"/login\" className=\"font-medium text-[#FE6F61] hover:text-[#e55a4d]\">\n            Back to login\n          </Link>\n        </p>\n      </div>\n\n      <div className=\"mt-8 sm:mx-auto sm:w-full sm:max-w-md\">\n        <div className=\"bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10\">\n          {success ? (\n            <div className=\"rounded-md bg-green-50 p-4\">\n              <div className=\"flex\">\n                <div className=\"flex-shrink-0\">\n                  <svg className=\"h-5 w-5 text-green-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                    <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n                  </svg>\n                </div>\n                <div className=\"ml-3\">\n                  <h3 className=\"text-sm font-medium text-green-800\">Password reset successful</h3>\n                  <div className=\"mt-2 text-sm text-green-700\">\n                    <p>\n                      Your password has been reset successfully. You will be redirected to the login page shortly.\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          ) : (\n            <>\n              {error && (\n                <div className=\"mb-4 bg-red-50 border-l-4 border-red-400 p-4\">\n                  <div className=\"flex\">\n                    <div className=\"flex-shrink-0\">\n                      <svg className=\"h-5 w-5 text-red-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                        <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clipRule=\"evenodd\" />\n                      </svg>\n                    </div>\n                    <div className=\"ml-3\">\n                      <p className=\"text-sm text-red-700\">\n                        {error}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              <form className=\"space-y-6\" onSubmit={handleSubmit}>\n                <div>\n                  <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700\">\n                    New password\n                  </label>\n                  <div className=\"mt-1 relative\">\n                    <input\n                      id=\"password\"\n                      name=\"password\"\n                      type={showPassword ? 'text' : 'password'}\n                      autoComplete=\"new-password\"\n                      value={formData.password}\n                      onChange={handleChange}\n                      className={`appearance-none block w-full px-3 py-2 border ${\n                        errors.password ? 'border-red-300' : 'border-gray-300'\n                      } rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-[#FE6F61] focus:border-[#FE6F61] sm:text-sm`}\n                    />\n                    <button\n                      type=\"button\"\n                      className=\"absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-500\"\n                      onClick={() => setShowPassword(!showPassword)}\n                    >\n                      {showPassword ? (\n                        <svg className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21\" />\n                        </svg>\n                      ) : (\n                        <svg className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z\" />\n                        </svg>\n                      )}\n                    </button>\n                    {errors.password && <p className=\"mt-2 text-sm text-red-600\">{errors.password}</p>}\n                  </div>\n                </div>\n\n                <div>\n                  <label htmlFor=\"confirmPassword\" className=\"block text-sm font-medium text-gray-700\">\n                    Confirm new password\n                  </label>\n                  <div className=\"mt-1\">\n                    <input\n                      id=\"confirmPassword\"\n                      name=\"confirmPassword\"\n                      type={showPassword ? 'text' : 'password'}\n                      autoComplete=\"new-password\"\n                      value={formData.confirmPassword}\n                      onChange={handleChange}\n                      className={`appearance-none block w-full px-3 py-2 border ${\n                        errors.confirmPassword ? 'border-red-300' : 'border-gray-300'\n                      } rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-[#FE6F61] focus:border-[#FE6F61] sm:text-sm`}\n                    />\n                    {errors.confirmPassword && (\n                      <p className=\"mt-2 text-sm text-red-600\">{errors.confirmPassword}</p>\n                    )}\n                  </div>\n                </div>\n\n                <div>\n                  <button\n                    type=\"submit\"\n                    disabled={loading}\n                    className=\"w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-[#FE6F61] hover:bg-[#e55a4d] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#FE6F61] disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    {loading ? <Spinner size=\"small\" color=\"white\" /> : 'Reset password'}\n                  </button>\n                </div>\n              </form>\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ResetPassword; "],"names":["ResetPassword","formData","setFormData","useState","password","confirmPassword","errors","setErrors","showPassword","setShowPassword","success","setSuccess","resetPassword","loading","error","useAuth","token","useParams","location","useLocation","navigate","useNavigate","useEffect","URLSearchParams","search","get","handleChange","e","name","value","target","_jsxs","className","children","_jsx","Link","to","viewBox","fill","fillRule","d","clipRule","_Fragment","onSubmit","async","preventDefault","validateForm","newErrors","length","Object","keys","resetToken","setTimeout","err","console","htmlFor","id","type","autoComplete","onChange","onClick","stroke","strokeLinecap","strokeLinejoin","strokeWidth","disabled","Spinner","size","color"],"sourceRoot":""}